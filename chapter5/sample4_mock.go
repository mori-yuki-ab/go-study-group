// Code generated by MockGen. DO NOT EDIT.
// Source: chapter5/sample4.go

// Package chapter5 is a generated GoMock package.
package chapter5

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockIFCalcService is a mock of IFCalcService interface
type MockIFCalcService struct {
	ctrl     *gomock.Controller
	recorder *MockIFCalcServiceMockRecorder
}

// MockIFCalcServiceMockRecorder is the mock recorder for MockIFCalcService
type MockIFCalcServiceMockRecorder struct {
	mock *MockIFCalcService
}

// NewMockIFCalcService creates a new mock instance
func NewMockIFCalcService(ctrl *gomock.Controller) *MockIFCalcService {
	mock := &MockIFCalcService{ctrl: ctrl}
	mock.recorder = &MockIFCalcServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockIFCalcService) EXPECT() *MockIFCalcServiceMockRecorder {
	return m.recorder
}

// XXX mocks base method
func (m *MockIFCalcService) XXX(x int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "XXX", x)
	ret0, _ := ret[0].(int)
	return ret0
}

// XXX indicates an expected call of XXX
func (mr *MockIFCalcServiceMockRecorder) XXX(x interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "XXX", reflect.TypeOf((*MockIFCalcService)(nil).XXX), x)
}

// YYY mocks base method
func (m *MockIFCalcService) YYY(x, y int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "YYY", x, y)
	ret0, _ := ret[0].(int)
	return ret0
}

// YYY indicates an expected call of YYY
func (mr *MockIFCalcServiceMockRecorder) YYY(x, y interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "YYY", reflect.TypeOf((*MockIFCalcService)(nil).YYY), x, y)
}
